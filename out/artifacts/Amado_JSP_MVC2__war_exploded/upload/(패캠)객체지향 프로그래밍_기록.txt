Animal dog <- 객체

인스턴스화
dog = new Animal();


참조 자료형
: 클래스 타입으로 선언
String(문자열을 위한 클래스), Date, Student 등


참조 변수
BirthDay day = new BirthDay
day.setYear(2000);
day -> 참조변수(주소값을 저장) 자바 JVM이 준 해쉬코드값이 주소값..
stack에 할당되어 heap에 있는 BirthDay 클래스 내의 멤버변수를 가리킴



this
1. 자신의 메모리를 가리킴
멤버변수의 메모리를 가리킴

2. ★생성자에서 다른 생성자를 호출함
ex)
public Book(String title, String author, int ISBN) { [1]
this.title = title;
this.author = author;
this.ISBN = ISBN;

public Book(String title, int ISBN) { [2]
  this(title, "Anonymous", ISBN); -> [1] 호출
}


3.인스턴스 자신의 주소를 반환



static 변수
- 여러 인스턴스가 하나의 값을 공유할 필요가 있음
- static 변수는 처음 프로그램이 로드 될 때 데이터 영역에 생성 됨
- 인스턴스의 생성과 상관 없이 사용할 수 있으므로 클래스 이름으로 참조
Student.serialNum = 100;
클래스 변수, 정적 변수라고도 함

- static 메서드안에서 인스턴스변수를 사용할 수 없음
- static 변수에 접근하기 위한 메서드는 반드시 static 메서드가 되어야 한다.


https://mangkyu.tistory.com/47 : static 설명

싱글톤 패턴
- 단 하나만 존재하는 인스턴스

생성자는 private으로 
static으로 유일한 객체 생성
외부에서 유일한 객체를 참조할 수 있는 public static get() 메서드 구현

싱글톤 패턴으로 구현되어 있는 클래스 : Calendar


배열 선언
int[] arr = new int[10];
int arr[] = new int[10];


기본 자료형 배열
int[] arr = new int[10];


참조 자료형 배열
Book[] library = new Book[5];
=> 디폴트는 null이 들어감(주소값이 들어감)


향상된 for문
ex)

Book[] library = new Book[5]

..[0] = new Book(..)
..[1] = new Book(..)

for (Book book : copyLibrary) {
  book.print()..
}

얕은복사 / 깊은복사 차이구별

얕은복사 : 객체의 참조값(주소값)을 복사 -> 같이 변경됨
ex) mon1 = mod2

깊은 복사: 객체의 실체값을 복사
-> 객체 Cloneable 인터페이스를 구현하여 Clone 메소드를 통해 객체의 실체를 반환
overried한 clone 메소드내에서 따로 처리를 해줘야 한다.
https://woongsin94.tistory.com/223
https://plas.tistory.com/20 : 자세한 이론 설명 / 코드는 못알아듣겠음
https://okky.kr/article/551621 : OKKY 간단 예시
https://okky.kr/article/670273?note=1881752 : 내가올린 질문

ArrayList 사용시
어떤 타입을 적용할 것인지 제네릭으로 명시해주는거 추천


상속을 사용해야 할때(유사한 클래스)
기존에 있는 클래스를 가져다가 좀더 확장된 클래스를 설계하고 싶을때 사용

포유류 <- 사람

extends 뒤에는 단 하나의 class만을 사용할 수 있음
자바는 single inheritance만을 지원함

protected를 적용한 변수는 상속받은 클래스(하위클래스)들도 사용할 수 있다.
동일 패키지까지는 가능 / 다만 외부에서는 사용x


오버라이딩
: 상위 클래스에 정의된 메서드의 구현 내용이 하위 클래스에서
구현할 내용과 맞지 않는 경우 하위 클래스에서 동일한 이름의
메서드를 재정의 할 수 있음
- 덮어쓴다는 의미 : 즉 재구현 한다는 것
- 매개변수는 그대로..


@애노테이션
컴파일러에게 특정한 정보를 제공해주는 역할

주로 사용되는 애노테이션 종류
1.@Override
: 재정의된 메서드라는 정보 제공
2.Functionallnterface : 함수형 인터페이스라는 정보 제공(람다식때 쓰임)
3.Deprecated : 이후 버전에서 사용되지 않을 수 있는 변수, 메서드에 사용됨
4.SuppressWarnings : 특정 경고가 나타나지 않도록 함


가상메서드
- 메서드의 이름과 메서드 주소를 가진 가상 메서드 테이블에서
호출될 메서드의 주소를 참조함
=> 재정의되는 메서드는 메서드주소가 바뀜

Customer vc = new VIPCustomer();
vc.calcPrice(10000);

Customer클래스와 VIPCustomer클래스가 있음
A라는 메서드를 호출할 때
재정의가 된 A 메소드가 있는 경우 VIPCustomer의 메서드가 호출됨
재정의가 된 A 메소드가 없는 경우 Customer의 메서드가 호출됨

가상함수 테이블이 있고 가상함수테이블의 주소매핑에 의해 호출되는것.


하위 클래스 생성시 순서
상위 클래스 생성자 호출 -> 하위 클래스 생성자 호출
(하위클래스의 생성자에서는 무조건 상위 클래스의 생성자가 호출되어야 함)
=> super(); 라는 코드가 프리컴파일러에 들어감
=> super는 상위클래스의 참조변수를 가지고 있는데
()를 붙이면 상위 클래스의 기본 생성자가 호출됨

하지만 상위클래스의 기본생성자가 없으면
매개변수가 정의된 생성자만 있으면 하위클래스에서 이를 명시적으로 호출하면 된다.


상속에서의 메모리 상태
- 상위 클래스의 인스턴스가 먼저 생성이 되고,
하위 클래스의 인스턴스가 생성 됨

★
Customer : 상위 클래스
VIPCustomer : 하위 클래스
VIPCustomer extends Customer 시..
Customer vc = new VIPCustomer();
=>힙 메모리에는 VIPCustomer까지 다 만들어지지만
 vc는 Customer의 변수와 메소드만 가리킴

상위 클래스로의 묵시적 형 변환(업캐스팅)
상위 클래스 형으로 변수를 선언하고 하위 클래스 인스턴스를 생성 할 수 있음
하위 클래스는 상위 클래스의 타입을 내포하고 있으므로 상위 클래스로 묵시적 형변환이 가능 함
상속관계에서 모든 하위 클래스는 상위클래스로 묵시적 형 변환이 됨
그 역은 성립x


다형성
- 하나의 코드가 여러 자료형으로 구현되어 실행되는 것
- 같은 코드에서 여러 실행 결과가 나옴
- 객체지향 프로그래밍의 유연성, 재활용성, 유지보수성에 기본이 되는 특징
https://m.blog.naver.com/PostView.nhn?blogId=heartflow89&logNo=220979244668&proxyReferer=https%3A%2F%2Fwww.google.com%2F : 설명

class Animal{
..move() {
}

class Human extends Animal{
..move(){
}
.
.

Animal hAnimal = new Human();
Animal tAnimal = new Tiger();
Animal eAnimal = new Eagle();


/*
AnimalTest test = new AnimalTest();
test.moveAnimal(hAnimal);
test.moveAnimal(tAnimal);
test.moveAnimal(eAnimal);
*.

ArrayList<Animal> animalList = new ArrayList<Animal>();
animalList.add(hAnimal);
animalList.add(tAnimal);
animalList.add(eAnimal);

for(Animal animal : animalList) {
  animal.move()
}

public void moveAnimal(Animal animal) {
  animal.move();
}

하나의 코드인 move가 다양한 포유류 종류들을 표현

장점
- 유사한 클래스가 추가되는 경우 유지보수에 용이하고
각 자료형 마다 다른 메서드를 호출하지 않으므로 코드에서 많은 if문이 사라짐


S-A관계(is a relationship : inheritance)
일반적인 개념과 구체적인 개념과의 관계
상위 클래스 : 일반적인 개념 클래스(예: 포유류)
하위 클래스 : 구체적인 개념 클래스(예: 사람, 원숭이, 고래...)
단순히 코드를 재사용하는 목적으로 사용하지 않음

HAS-A관계(Composition) : 한 클래스가 다른 클래스를 소유한 관계
코드 재사용의 한 방법
Student가 Subject를 포함한 관계
ex)
class Student{
  Subject majorSubject;
}




하위 클래슬로 형 변환, 다운캐스팅 / instanceOf
- 묵시적으로 상위 클래스 형변환된 인스턴스가 원래 자료형(하위클래스)으로 변환되어야 할 때
다운 캐스팅이라 함

하위 클래스로의 형 변환은 명시적으로 되어야 함

Customer vc = new VIPCustomer(); //묵시적
VIPCustomer vCustomer = (VIPCustomer)vc; //명시적



Animal hAnimal = new Human();
Animal tAnimal = new Tiger();
Animal eAnimal = new Eagle();

//Eagle human = (Eagle)hAnimal(); <- 오류발생

if(hAnimal instanceof Eagle) {
//hAniaml의 인스턴스가 Eagle이니? 아니기 때문에 instanceof는 false을 반환하여 실행되지 않음
  Eagle human = (Eagle)hAnimal(); 
}

올바른 코드
if(hAnimal instanceof Human){
  Human human = (Human))hAnimal(); 
}

나중에 Object 타입으로 반환을 받는경우
원래형으로 변환할때 instanceof를 적용해주는게 안전함


ArrayList<Animal> animalList = new ArrayList<Animal>();
animalList.add(hAnimal);
animalList.add(tAnimal);
animalList.add(eAnimal);


public void testDownCasting(ArrayList<Animal> list) {
    for(int i = 0; i < list.size(); i += 1) {
        Animal animal = list.get(i);
        if(animal instanceof Human) {
            Human human = (Human)animal;
            human.readBooks();
        }
        else if(animal instanceof Tiger) {
            Tiger tiger = (Tiger)animal;
            tiger.hunting();
        }
        else if(animal instanceof Eagle) {
            Eagle eagle = (Eagle)animal;
            eagle.flying();
        }
        else{
            System.out.println(error);
        }
    }
}

다운캐스팅을 안쓰고 상위클래스에서 오버라이딩으로 해결 가능
-> 융통성 있음(추천함)


추상 클래스(=concrete class) -> UML에서 이탤릭체로 표현(추상 메서드도 마찬가지)
- 추상 메서드를 포함한 클래스
추상 메서드 : 구현 코드가 없이 선언부만 있는 메서드

abstract 예약어 사용
추상 클래스는 new(인스턴스화)할 수 없음
-> 메시지의 body가 없어 로드될수 있는게 없으므로
- 상위클래스용으로 주로 사용
- 하위클래스에서 반드시 구현해야될 메소드 선언
즉, 구현의 책임을 하위클래스에 위임(상속받은 클래스가 구현해야한다..)




public abstract class Computer {
  public abstract void display();
  public abstract void typing();


public class Desktop extends Computer{

@Override
public void display() { }

@Override
public void typing() { }

만약 두개중에 하나만 구현한다거나 둘다 구현하기 싫으면
public abstract class Desktop extends Computer{ }를 적는다.

추상메서드가 포함된 클래스는 추상 클래스로 선언


템플릿 메서드
템플릿 : 틀이나 견본을 의미

템플릿 메서드 : 추상 메서드나 구현된 메서드를 활용하여 전체의 흐름(시나리오)를 정의 해 놓은 메서드
final로 선언하여 재정의할 수 없게 함

템플릿 메서드 패턴 : 디자인 패턴의 일종
프레임워크에서 많이 사용되는 설계 패턴
추상 클래스로 선언된 상위 클래스에서 추상 메서드를 이용하여
전체 구현의 흐름을 정의하고 구체적인 각 메서드 구현은
하위클래스에 위임함
하위 클래스가 다른 구현을 했다고 해서 템플릿 메서드에 정의된 시나리오대로 수행됨


프레임워크의 흐름은 정해져있음

final 예약어
- final 변수는 값이 변경될 수 없는 상수임
public static final double PI = 3.14;
오직 한 번만 값을 할 당할 수 있음
final은 static과 많이 쓰인다.

- final 메서드는 하위 클래스에서 재정의 할 수 없음

- final 클래스는 더 이상 상속되지 않음
ex) Java의 String 클래스



public static final 상수 값 정의하여 사용하기

프로젝트 구현 시 여러 파일에서 공유해야 하는 상수 값은
하나의 파일에 선언하여 사용하면 편리함.

public class Define{
  public static final int MIN = 1;
  public static final int MAX = 99999;
}
외부 클래스
System.out.println(Define.MAX);

인터페이스의 요소
- 추상 메서드(기능 구현 X)
- 상수
- 디폴트 메서드
- 정적 메서드
- private 메서드
=> 어떤 역할을 하는 객체라는 것을 설명하는 설명서라고 이해하면됨

UML에서 점선으로 표현
상속받을땐 실선으로 표현

인터페이스에서 선언한 변수는 컴파일 과정에서 상수로 변환
인터페이스에서 선언한 메서드는 컴파일 과정에서 추상 메서드로 변환

ex)
첫번쨰 클래스는 인터페이스(Calc)
두번쨰 클래스에서 인터페이스를 받고(Calculator)
선언한 것을 다 구현하기 싫으면 두번쨰 class에 abstract를 붙힌다.
그 후 세번째 클래스(CompleteCalc)를 만들어 두번째 클래스를 상속받으면
구현안한 나머지 메소드를 구현해줘야 한다.
(두번째 클래스는 new할 수 없다)


Calc calc = new CompleteCalc();
인터페이스를 구현한 클래스는 인터페이스 타입으로 변수를 선언하여 인스턴스를
생성 할 수 있음

인터페이스는 구현 코드가 없기 때문에 타입 상속이라함

calc는 Calc에서 선언한 메소드만 사용간으
(CompleteCalc에서 선언한 메서드 사용 불가)

인터페이스 역할(설계 시 많이 사용)
인터페이스는 클라이언트 프로그램에 어떤 메서드를 제공하는지 알려주는 명세 또는 약속
한 객체가 어떤 인터페이스의 타입이라 함은 그 인터페이스의 메서드를 구현했다는 의미
클라이언트 프로그램은 실제 구현내용을 몰라도 인터페이스의 정의만 알면 그 객체를 사용할 수 있음
인터페이스를 구현해 놓은 다양한 객체를 사용함 - 다형성
: JDBC를 구현한 오라클, MSSQL 라이브러리 등


db연결의 Connection도 인터페이스
이를 oracle의 jar, mysql의 jar가 구현함


인터페이스와 strategy pattern
sorting <- bubble sort, quick sort, heap sort
=> 인터페이스를 활용하면 다양한 정책이나 알고리즘을 프로그램의 큰 수정
없이 적용, 확장할 수 있음


인터페이스의 요소
상수 : 선언된 모든 변수는 상수로 처리 됨
메서드 : 모든 메서드는 추상 메서드
디폴트 메서드 : 기본 구현을 가지는 메서드 / 구현하는 클래스에서 재정의 할 수 있음(java 8)
https://asfirstalways.tistory.com/353 : 설명
정적 메서드 : 인스턴스 생성과 상관없이 인터페이스 타입으로 호출하는 메서드(java 8)
private 메서드 : 인터페이스 내에서 사용하기 위해 구현한 메서드 / 구현하는 클래스에서 재정의 할 수 없음(java 9)


인터페이스는 구현 코드가 없으므로 하나의 클래스가 여러 인터페이스를 구현할 수 있음
디폴트 메서드의 이름이 중복되는 경우에는 재정의 함


인터페이스 간에도 상속이 가능함
구현이 없으므로 extends 뒤에 여러 인터페이스를 상속받을 수 있음
구현 내용이 없으므로 타입 상속(type inheritance)라고 함


하나의 추상 클래스와 하나의 인터페이스를 동시에 extends하고 implements하는게 프레임워크에서 많이 쓰임


Object 클래스
모든 클래스의 최상위 클래스
java.lang.Object 클래스

모든 클래스는 Object클래스에서 상속받음
모든 클래스는 Object클래스의 메서드를 사용할 수 있음
모든 클래스느 Object클래스의 일부 메서드를 재정의하여 사용할 수 있음
-> final로 정의된 메소드들은 하위클래스는 제외


String str = new String("토지");
System.out.println(str.toString());
String 클래스 안에 toString() 메서드가 정의되어 있음
toString()은 생략가능
toString()은 Object의 메서드 
Object의 메서드를 String 클래스 안에서 재정의한 것



hashCode() 메서드
- 인스턴스가 저장된 가상머신의 주소를 10진수로 반환
- 두 객체가 같은 객체인지 확인하는 Method
두개의 서로 다른 메모리에 위치한 인스턴스가 동일하다는 것은?
논리적으로 동일(둘의 참조값이 다르더라도 객체 내부value값이 같을때): equals()의 반환값이 true
=> 이 equals 함수를 재정의한 예가 String class. String class는 equals() 메소드를 재정의해서
번지비교가 아닌 문자열 비교를 한다.
동일한 hashCode 값을 가짐 : hashCode()의 반환 값이 동일

JVM에서 인스턴스 생성시 만들어지는 주소값 = hashcode

★hash의 개념 중요 나중에 공부 ㄱ

hashCode 설명
https://fors.tistory.com/81

https://okky.kr/article/596050
hashCode = 객체를 구분하기위한 정수값일 뿐
hashCode의 필요성
그냥 해쉬맵, 해쉬테이블에 저장하기위해서 였습니다.
--> 왜 해쉬맵, 해쉬테이블에 저장하려고 하는대요?
--> 이 자료구조는 빠르니까요. 평균적인 시간복잡도가 매우 작다고해요. https://siyoon210.tistory.com/85 



clone() 메서드
객체의 복사본을 만듬
기본 틀(protopyte)으로 부터 같은 속성 값을 가진 객체의 복사본을 생성할 수 있음

객체지향 프로그래밍의 정보은닉에 위배되는 가능성이 있으므로 복제할 객체는
cloneable 인터페이스를 명시해야함

Object의 finalize()는 객체 해제시(인스턴스가 힙메모리에서 해제됬을떄) GC가 로드해서 수행
-> 마무리 청소의미?


String 클래스 선언하기
String str1 = new String("abc"); //인스턴스로 생성됨, 힙 메모리에 선언
String str2 = "abc"; //상수풀에 있는 문자열을 가리킴

String은 immutable
한번 선언되거나 생성된 문자열을 변경할 수 없음
String 클래스의 concat() 메서드 혹은 "+"를 이용하여 String을 연결하는 경우
문자열은 새로 생성됨


StringBuildedr와 StringBuffer
가변적인 char[] 배열을 멤버변수라 가지고 있는 클래스
문자열을 변경하거나 연결하는 경우 사용하면 편리한 클래스

StringBuffer는 멀티 쓰레드 프로그래밍에서 동기화가 보장됨
단일 쓰레드 프로그래밍에서는 StringBuilder를 사용하는것이 더 좋음
toString()메서드로 String 반환


StringBuilder buffer = new StringBuilder(java);
buffer.append("ss");
buffer.toString(); 


Wrapper 클래스
기본자료형에 대한 클래스

컬렉션 프레임워크 : 자료구조등이 구현되어있음 -> 제네릭이 다 적용되어 있음

제네릭 프로그래밍이란
변수의 선언이나 메서드의 매개변수를 하나의 참조 자료형이 아닌 여러 자료형을 변환 될 수 있도록 
프로그래밍 하는 방식

실제 사용되는 참조 자료형으로의 변환은 컴파일러가 검증하므로 안정적인 프로그래밍 방식

자료형 매개변수 T
여러 참조 자료형으로 대체 될 수 있는 부분을 하나의 문자로 표현

type의 의미로 T 사용


상위클래스를 선언한 후 

제네릭 메서드는 일반클래스에서 사용할 수 있지만 지역변수개념으로 그 클래스 안에서만 사용할 수 있다

컬렉션 프레임워크
- 프로그램 구현에 필요한 자료구조와 알고리즘을 구현해 놓은 라이브러리
- java.util 패키지에 구현되어 있음
- 개발에 소요되는 시간을 절약하고 최적화된 라이브러리를 사용할 수 있음
- Collection 인터페이스와 Map인터페이스로 구성

Collection 인터페이스
- 하나의 객체의 관리를 위해 선언된 인터페이스로 필요한 기본 메서드가 선언되어 있음
- 하위에 List, Set 인터페이스가 있음

Map 인터페이스
- 쌍으로 이루어진 객체를 관리하는데 필요한 여러 메서드가 선언되어 있음
- Map을 사용하는 객체는 key-value 쌍으로 되어 있고 key는 중복될 수 없음
Map-> Hashtable -> Porperties(이거많이씀 / 스트림 io랑 연결되어있음)

 
자바 해시테이블
- 데이터가 75%차면 자동으로 저장 영역을 확대하고 key값의 중복을 허용X


바이너리 트리
하위 노드 개수가 2개이하

BST(Binary Search Tree)
중복된 데이터 삽입X
나를 중심으로 작은값은 왼쪽하위노드 / 큰값은 오른쪽하위노드에 배치



List 인터페이스
- Collection 하위 인터페이스
- 객체를 순서(중요)에 따라 저장하고 관리하는데 필요한 메서드가 선언된 인터페이스
- 배열의 기능을 구현하기 위한 메서드가 선언됨
- ArrayList, Vector, LinkedList


Set 인터페이스(중복 허용X)

Iterator로 순회하기
Collection의 개체를 순회하는 인터페이스
iterator() 메서드 호출
- Iterator ir = memberArrayList.iterator();

Iterator에 선언된 메서드
boolean hasNext() : 이후에 요소가 더 있는지를 체크하는 메서드이며, 요소가 있다면 true를 반환
E next() : 다음에 있는 요소를 반환

HashSet<String> set = new HashSet<String>();
        set.add("리순신");
	set.add("리순신2");
	set.add("리순신3");
-> HashSet은 
순서대로 안들어감

Iterator<String> ir = set.iterator();
        while(ir.hasNext()){
            String str = ir.next();
            System.out.println(str);
        }

set같은 경우 get으로 가져오는게 아닌 Iterator or 향상된 for문을 이용해 순회하면 된다.


Member a = new Member(300, "Park");
Member b = new Member(300, "Park2");
=>HashSet같은 경우 논리적으로 동등하다는 것이 정의가 되지 않았기 때문에 이를 정의해줘야 한다.
=> List같은 경우는 정의되어 있음
=> id가 같으면 같은 멤버라는것을 구현해줘야 중복을 허용하지 않는다.
(Object의 hashCode와 equals 사용)
https://sas-study.tistory.com/87 : 설명

HashSet은 객체를 저장하기전 먼저 객체의 hashCode() 메서드를 호출하여 해시코드를 얻고
이미 저장되어 있는 객체들의 해시코드와 비교한다. 만약 동일한 해쉬코드가 있다면 다시 equals() 메소드로
두 객체를 비교해 참이면 동일한 객체로 저장하고 중복 저장하지 않는다.

출처: https://eddyplusit.tistory.com/40 [EddIT]


TreeSet 클래스
- 객체의 정렬에 사용되는 클래스
- 중복을 허용하지 않으면서 오름차순이나 내림차순으로 객체를 정렬 함
- 내부적으로 이진검색트리로 구현되어 있음
- 이진 검색 트리에 자료가 저장 될 때 비교하여 저장될 위치를 정함
- 객체 비교를 위해 Comparable이나 Comparator 인터페이스를 구현해야 함(중요)

TreeSet은 기본적으로 오름차순으로 정렬한다.

Comparable은 compareTo() 메서드를 구현
매개변수와 객체 자신을 비교
-> 일반적으로 이걸 더 많이 사용

Comparator는 compare() 메서드를 구현
두 개의 매개변수를 비교
TreeSet 생성자에 Comparator가 구현된 객체를 매개변수로 전달
ex) TressSet<Member> treeSet = new TreeSet<Member>(new Member());

HashMap클래스
Map 인터페이스를 구현한 클래스 중 가장 일반적으로 사용하는 클래스
HashTable 클래스는 자바2부터 제공된 클래스로 Vector처럼 동기화를 제공 함
pari 자료를 쉽고 빠르게 관리할 수 있음

TreeMap 클래스
key 객체를 정렬하여 key-value를 pari로 관리하는 클래스
key에 사용되는 클래스에 Comparable, Comparator 인터페이스를 구현
java에 많은 클래스들은 이미 Comparable이 구현되어 있음
구현 된 클래스를 key로 사용하는 경우는 구현할 필요 없음

추가
hashMap.put(member.getMemberId(), member);

제거
if(hashMap.containsKey(memberId)){ //키가 포함되어 있는지 체크
    hashMap.remove(memberId); 
    return true;
}


hashMap.values().iterator(); : 모든 값 반환
hashMap.keySet().iterator(); : 모든 키 반환

hashMap은 equals랑 hashCode를 구현안해도 구분해줌
treeMap도 구현X


내부 클래스
- 클래스 내부에 구현한 클래스(중첩된 클래스)
- 클래스 내부에서 사용하기 위해 선언하고 구현하는 클래스
- 주로 외부 클래스 생성자에서 내부 클래스를 생성

익명내부클래스를 많이 사용

static은 먼저 생성이되고 인스턴스가 생성이 안되도 바로 쓸수 있다


메서드안에 클래스 ->지역내부 클래스
지역내부클래스에서는 지역변수(매개변수도 지역변수)들을 변경시킬 수 없음(유효성이 짧기 때문에 상수로만들어야함)

익명내부클래스 사용예시
Runnable runner = new Runnable() {
        @Override
        public void run() {

        }
    };
단 하나의 인터페이스나 단 하나의 추상클래스 경우 클래스 이름없이 바로 new 키워드 이용하여 생성가능

익명내부클래스 사용방법 잘알아두기

https://sjh836.tistory.com/145 : 설명
https://onsil-thegreenhouse.github.io/programming/java/2017/12/12/java_tutorial_1-16/ : 구체적 설명



람다식이란?
자바에서 함수형 프로그래밍을 구현하는 방식(외부변수 사용 X)
클래스를 생성하지 않고 함수의 호출만으로 기능을 수행
함수형 인터페이스를 선언함
자바8부터 지원되는 기능

함수형 프로그래밍이란?
- 순수 함수를 구현하고 호출
- 매개 변수만을 사용하도록 만든 함수로 외부 자료에 부수적인 영향이 밟생하지 않도록 함
- 입력 받은 자료를 기반으로 수행되고 외부에 영향을 미치지 않으므로 병렬처리등에 가능 / 안정적인 확장성 있는 프로그래밍 방식(사이드 이펙트 미발생)


람다식 문법
공통 - 자료형 생략 가능
(1)매개변수가 하나인 경우 괄호 생략 가능(두 개인 경우는 괄호 생략 불가능)
str -> {System.out.println(str);}
:str을 받으면 str을 출력

(2)중괄호 안의 구현부가 한 문장인 경우 중괄호 생략
str -> System.out.println(str);

(3)중괄호 안의 구현부가 한 문장이라도 return문은 중괄호를 생략할 수 없음
str -> return str.length(); //오류

(4)중괄호 안의 구현부가 반환문 하나라면 return과 중괄호를 모두 생략할 수 있음
(x, y) -> x+y       // 두값을 더하여 반환
str -> str.length() //문자열 길이를 반환


함수형 인터페이스@FunctionalInterface(람다식을 위한 인터페이스이다)
- 메서드가 하나만 있어야 한다.

@FunctionalInterface
public interface MyMaxNumber {
    int getMaxNumber(int x ,int y);
}

public class Main {
    public static void main(String[] args){
        MyMaxNumber max = (x, y)-> (x >= y)? x : y; //메서드가 하나뿐이니 메서드이름 생략 가능
        System.out.println(max.getMaxNumber(10, 20));
    }
}


함수를 변수처럼 사용하는 람다식
프로그램에서 변수는..
자료형에 기반하여 선언하고 int a;
매개변수로 전달하고 int add(int x, int y);
메서드의 반환 값으로 사용 return num;

람다식은 프로그램내에서 변수처럼 사용할 수 있음


스트림
- 자료의 대상과 관계없이 동일한 연산을 수행할 수 있는 기능(자료의 추상화)
- 배열, 컬렉션에 동일한 연산이 수행되어 일관성 있는 처리 가능
- 한번 생성하고 사용한 스트림은 재사용할 수 없음
- 스트림 연산은 기존 자료를 변경하지 않음
- 중간 연산과 최종 연산으로 구분 됨
- 최종 연산이 수행되어야 모든 연산이 적용되는 지연 연산


스트림 연산 - 중간 연산
filter(), map()이 있음
조건에 맞는 요소를 추출(filter)하거나 요소를 변환 함(map)

문자열의 길이가 5이상인 요소만 출력하기
sList.stream().filter(s -> s.length() >= 5).forEach(s -> System.out.println(s));

고객 클래스에서 고객 이름만 가져오기
customerList.stream().map(c->c.getName()).forEach(s -> System.out.println(s));


스트림 연산 - 최종 연산
스트림의 자료를 소모 하면서 연산을 수행
최종 연산 후에 스트림은 더 이상 다른 연산을 적용할 수 없음(재활용불가) 
forEach() : 요소를 하나씩 꺼내옴
count() : 요소의 개수
sum() : 요소의 합

이외도 여러가지 최종연산이 있음

 List<String> sList = new ArrayList<String>();
        sList.add("Tomas");

        Stream<String> stream = sList.stream(); //Collections 경우 스트림 메소드 즉시 사용 가능
        stream.forEach(s -> System.out.print(s + " "));

https://jeong-pro.tistory.com/165 : 스트림 설명


reduce 연산 - 최종연산
- 정의된 연산이 아닌 프로그래머가 직접 지정하는 연산을 적용
- 최종 연산으로 스트림의 요소를 소모하며 연산 수행
- 배열의 모든 요소의 합을 구하는 reduce() 연산
ex) Arrays.stream(arr).reduce(0(초기값),  (a,b) -> a + b));
두 번째 요소로 전달되는 람다식에 따라 다양한 기능을 수행


오류와 예외 클래스
시스템 오류(error) : 가상 머신에서 발생, 프로그래머가 처리할 수 없음 
동적 메모리를 다 사용한 경우, stack over flow 등

예외(Exception) : 프로그램에서 제어할 수 없는 오류
읽으려는 파일이 없는 경우, 네트웍이나 소켓 연결 오류 등 자바 프로그램에서는 예외에 대한 처리를 수행 함

모든 예외 클래스의 최상위 클래스는 Exception 클래스


throw new Exception(); 
-> 오류를 일부러 호출시킴

FileinputStream은 Autoclosable가 구현되어 있음

https://blog.naver.com/PostView.nhn?blogId=killberos36&logNo=221688600440&categoryNo=0&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=postView
: 예외처리 간단 설명


예외 처리 미루기
- throws를 사용하여 예외처리 미루기
- try{} 블록으로 예외를 처리 하지 않고, 메서드 선언부에 throws를 추가
- 예외가 발생한 메서드에서 예외 처리를 하지 않고 이 메서드를 호출한 곳에서 예외 처리를 한다는 의미
- main()에서 throws를 사용하면 가상머신에서 처리 됨


사용자 정의 예외
- JDK에서 제공되는 예외 클래스 외에 사용자가 필요에 의해 예외 클래스를 정의하여 사용
- 기존 JDK 클래스에서 상속받아 예외 클래스를 만듬

public class aaa extends Exception {
  public aaa (String message) {
    super(message);
  }
}
..
if(?){
throws new aaa("불라불라");
}


https://palpit.tistory.com/914 : 사용자 정의 예외


자바 입출력 스트림

입출력 스트림 구분
I/O 대상 기준 : 입력 스트림, 출력 스트림
자료의 종류 : 바이트 스트림, 문자 스트림
스트림의 기능 : 기반 스트림, 보조 스트림(기반스트림을 서포트하는 역할)


스트림의 예(~InputStream : 바이트 기반, 나머지는 문자기반)
입력 스트림 : FileInputStream, FileReader, BufferedInputStream, BufferedReader 등
출력 스트림 : FileOutputStream, FileWriter, BufferedOutputStream, BufferedWriter 등

바이트 단위 스트림 : 바이트 단위로 자료를 읽고 씀(동영상, 음악파일 등)
문자 단위 스트림 : 문자는 2바이트씩 처리 해야 함

기반 스트림 : 대상에 직접 자료를 읽고 쓰는 기능의 스트림
보조 스트림 : 직접 읽고 쓰는 기능은 없고 추가적인 기능을 제공해주는 스트림
                 기반 스트림이나 또 다른 보조 스트림을 생성자의 매개변수로 포함함

기반 스트림 : FileInputStream, FileOutputStream, FileReader, FileWriter 등
보조 스트림 : InputStreamReader, OutputStreamWriter, BufferedInputStream, 
                 BufferedOutputStream 등


System.in 사용하여 입력 받기
- 한바이트씩 읽어 들임 / in 자체가 InputStream
- 한글과 같은 여러 바이트로 된 문자를 읽기 위해서는 InputStreamReader와 같은 보조 스트림을 사용

 while ((i = System.in.read()) != '\n') { //엔터치기 전까지 입력
                System.out.println(i);
                System.out.println((char) i);
            }


int i;
            InputStreamReader isr = new InputStreamReader(System.in);
            while ((i = isr.read()) != '끝') { //끝을 입력하면 끝남
                System.out.println(i);
                System.out.println((char) i);
            }


// 콘솔에서 실행
        Console console = System.console();

        String name = console.readLine();
        char[] password = console.readPassword();

        System.out.println(name + ", " + password);

https://zzdd1558.tistory.com/156 : 설명


바이트 단위 스트림

InputStream : 바이트 단위 입력 스트림 최상위 클래스
OutputStream : 바이트 단위 출력 스트림 최상위 클래스

추상 메서드를 포함한 추상 클래스로 하위 클래스가 구현하여 사용
주요 하위 클래스
FileInputStream : 파일에서 바이트 단위로 자료를 읽는다
ByteArrayInputStream : Byte 배열 메모리에서 바이트 단위로 자료를 읽는다
FilterInputStream : 기반 스트림에서 자료를 읽을 때 추가 기능을 제공하는 보조 스트림의 상위 크래스


FileOutputStream : 바이트 단위로 파일에 자료를 쓴다
ByteArrayOutputStream : Byte 배열에 바이트 단위로 자료를 쓴다.
FilterOutputStream : 기반 스트림에서 자료를 쓸 때 추가 기능을 제공하는 보조 스트림의 상위 클래스이다.


FileInputStream과 FileOutputStream 사용하기
- 파일에 한 바이트씩 자료를 읽고 쓰는데 사용
- 입력 스트림은 파일이 없는 경우 예외 발생
- 출력 스트림은 파일이 없는 경우 파일 생성하여 출력


문자 단위 스트림
Reader : 문자 단위로 읽는 최상위 스트림
Writer : 문자 단위로 쓰는 최상위 스트림
추상 메서드를 포함한 추상 클래스로 하위 클래스가 상속받아 구현
하위 클래스
FileReader : 파일에서 문자 단위로 읽는 스트림 클래스
InputStreamReader : 바이트 단위로 읽은 자료를 문자로 변환해 주는 보조 스트림 클래스
BufferedReader : 문자로 읽을 때 배열을 제공하여 한꺼번에 읽을 수 있는 기능을 제공해주는 보조 스트림

FileaWriter : 파일에서 문자 단위로 출력하는 스트림 클래스
OutputStreamWriter : 파일에 바이트 단위로 출력한 자료를 문자로 변환해 주는 보조 스트림
BufferedWriter : 문자로 쓸 때 배열을 제공하여 한꺼번에 쓸 수 있는 기능을 제공해 주는 보조 스트림

BufferedWriter과 BufferedReader 설명
https://coding-factory.tistory.com/251

FileReader와 FileWriter
- 파일에 문자를 읽고 쓸때 가장 많이 사용하는 클래스
- 문자의 인코딩 방식을 지정할 수 있음


보조 스트림
실제 읽고 쓰는 스트림이 아닌 보조적인 기능을 추가하는 스트림
FilterInputStream과 FilterOutputStream이 보조스트림의 상위 클래스

생성자의 매개 변수로 또 다른 스트림을 가짐
1.protected FilterInputStream(InputStream in) : 생성자의 매개변수로 InputStream을 받는다.
2.publicFilterOutputStream(OutputStream out) : 생성자의 매개변수로 OutputStream을 받는다.

데코레이터 패턴
기반 스트림 + 보조스트림 + 보조스트림 ...
https://gmlwjd9405.github.io/2018/07/09/decorator-pattern.html : 설명

여러가지 보조스트림 사용하기
Buffered 스트림 : 내부에 8192 바이트 배열을 가지고 있음 / 읽거나 쓸 때 속도가 빠름

DataInputStream / DataOutputStream : 자료가 저장된 상태 그대로 자료형을 유지하며 읽거나 쓰는 기능을 제공하는 스트림


https://heedipro.tistory.com/34 : 보조스틀림 간단 설명


직렬화
- 인스턴스의 상태를 그대로 저장하거나 네트웍으로 전송하고 이를 다시 복원하는 방식
ObjectInputStream과 ObjectOutputStream 사용

Serializable 인터페이스
- 직렬화는 인스턴스의 내용이 외부(파일, 네트웤)로 유출되는 것이므로 프로그래머가 객체의 
직렬화 가능 여부를 명시함

구현 코드가 없는 mark interface

http://woowabros.github.io/experience/2017/10/17/java-serialize.html : 직렬화
https://nesoy.github.io/articles/2018-04/Java-Serialize : 간단 직렬화 설명

※ JSON이란?
https://nesoy.github.io/articles/2017-02/JSON


그 외 입출력 클래스
File 클래스
- 파일 개념을 추상화한 클래스
- 입출력 기능은 없고 파일의 속성, 경로, 이름 등을 알 수 있음

RandomAccessFile 클래스
- 입출력 클래스 중 유일하게 파일 입출력을 동시에 할 수 있는 클래스
- 파일 포인터가 있어서 읽고 쓰는 위치의 이동이 가능함
- 다양한 자료형에 대한 메서드가 제공 됨

https://ddo-o.tistory.com/40 : randomAccessFile 설명


데코레이터 패턴
- 자바의 입출력 스트림은 데코레이터 패턴을 사용
- 실제 입출력 기능을 가진 객체와 그 외 다양한 기능을 제공하는 데코레이터(보조스트림)을 사용하여 다양한 
입출력 기능을 구현
- 상속보다 유연한 확장성을 가짐
- 지속적인 서비스의 증가와 제거가 용이함

그림 중요

https://gdtbgl93.tistory.com/9 : 데코레이터 패턴 설명


웹 프로그래밍은 웹서버가 스레드를 구현해줌 -> 직접 구현할일이 별로 없음

Thread구현하기
1.자바 Thread 클래스로부터 상속받아 구현
2.Runnable 인터페이스 구현
- 자바는 다중상속이 허용되지 않으므로 이미 다른 클래스를 상속한 경우에 사용


멀티-스레드 프로그래밍
- 동시에 여러 개의 Thread가 수행되는 프로그래밍
- Thread는 각각의 작업공간(context)을 가짐
- 공유 자원이 있는 경우 race condition이 발생
- critical section에 대한 동기화(synchronization)의 구현이 필요


join() 메서드
- 다른 thread의 결과를 보고 진행해야 하는 일이 있는 경우 join()메서드를 활용
- join()메서드를 호출한 thread가 on-runnable 상태가 됨


interrupt() 메서드
- 다른 thread에 예외를 발생시키는 interrupt를 보냄
- thread가 join(), sleep(), wait() 메서드에 의해 블럭킹 되었다면 interrupt에 의해
다시 runnable 상태가 될 수 있음
https://ict-nroo.tistory.com/22 : interrupt() 메서드 설명


Thread 종료하기
-데몬 등 무한 반복하는 thread가 종료될 수 있도록 run() 메서드 내의 while문을 활용
Thread.stop()은 사용하지 않음

자바에서 동기화 구현
synchronized 수행문과 synchronized 메서드를 이용

방법1
synchronized 수행문
  synchronized(참조형 수식) {
}
참조형 수식에 해당되는 객체에 lock을 건다.

방법2
synchronized 메서드
현재 이 메서드가 속해 있는 객체에 lock을 건다.
synchronized 메서드 내에서 다른 synchronized 메서드를 호출하지 않는다.
(deadlick 방지위해)

run에 싱크로나이즈를 걸어봤자 무의미 -> 블럭방식으로 해결

메서드 방식보다 싱크러나이즈 블럭방식이 더섬세

wait() / notify()
- wait() : 리소스가 더이상 유효하지 않은 경우 리소스가 사용 가능할 때 까지 위해 trhead를 
non-runnable 상태로 전환
wait() 상태가 된 thread은 notify()가 호출될 때 까지 기다린다.

notify() : wait()하고 있는 thread중 한 thread를 runnable한 상태로 깨움

notifyAll() : wait()하고 있는 모든 thread가 runnable한 상태가 되도록 함
notify()보다 notifyAll()을 사용하기를 권장
특정 thread가 통지를 받도록 제어할 수 없으므로 모두 깨운 후 scheduler에 CPU를 점유하는 것이 좀더 공평함


기타 자바 기록
컬렉션 구현체 인터페이스 사용 이유, for-each 사용 이유
https://multifrontgarden.tistory.com/130





