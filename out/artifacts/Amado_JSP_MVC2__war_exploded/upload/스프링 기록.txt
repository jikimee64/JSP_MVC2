요청헤더의 쿠키 
jsession -> 이걸로 톰캣이 사용자식별

저값을 지우면 new user로 인식

스프링 프레임워크 코어~!~!~!


javaEE

엔터프라이즈 소프트웨어
=원하는기능 모두 제공
java ee 8 : 엔터프라이즈 에디션

jcp = 커뮤니티 시스템

J2EE(정해진 룰) -> SPRING(커스텀 씹가능)

ioc container

applicationContext

applicationContext context = new 
ClassPathXmlApplication("OO.xml")
-> xml을 읽음

spring-context안에 spring-core가 있음

빈은 하나이상의 id를 가져야 함

빈 identifier이 겹치면 에러 발생


빈으로 따로 설정했던 객체들은 다름
다른주소이므로 다른객체

특정빈에서 다른 빈 참조
ref 사용


팩토리 메서드
객체 생성 처리를 서브 클래스로 분리해 처리하도록 캡슐화하는 패턴

조건에 따라 객체를 다르게 생성해야할 때



생성자는 객체가 만들어질때 딱 한번 시행되서 딱ㅎ ㅏㄴ번만 필요한ㅇ 코드 삽입

setter는 코드가 돌다가 객체에 디펜더시가 변경하고싶을때 (어느시기나)
사용

보통은 생성자이용

di를 통해 설정과 비즈니스 로직을 분리!!
모듈화 씹중요

xml쓸때 Autowiring는 되도록 사용x


public void set~(List<String> developers) {
this.developers = developers;


bean scopes

빈의 범위
객체를 만들때 컨테이너가 이 객체를 한번만 호출하는지
호출마다 객체를 여러번 만드는지에대한 내용

싱글톤 / 프로토 타입(실무에서 많이씀)
-> 대부분 싱글톤

동일성(identity) : 객체 주소 같다
동등성(equals) : 객체의 값이 같다

스프링은 기본값이 싱글톤
->동일성 보장


Customizing the Nature of a Bean
- Lifecycle Callbacks

이니셜라이징 빈 
이 인터페이스의 추상메서드 afterPropertiesSet() 만 구현해주면
Spring이 초기화 시점에 알아서 호출해 준다

1.7 / 1.8 Pass
xml 방식 : xml만보고 스프링 설정 파악 가능
설정과 소스코드의 분리 
단점 : xml덩어리가 커지면 관리가 힘듬
-> 어노테이션으로 극복
-> 하지만 소스코드와 어노테이션의 분리가 애매해짐(포조라고 불리기에 애매)
-> 상황에 따라 맞는거 쓰자

어노테이션을 사용하기 위해선 xml에 추가해줘야됨
1.9 참조

@Required는 잘 사용 안됨

@Autowired 많이 사용됨
- 스프링 컨테이너가 자동으로 빈의 연결을 할당

@postConstruct
의존성 주입이 이루어진 후 초기화를 수행하는 메서드이다. 
@PostConstruct가 붙은 메서드는 클래스가 
service(로직을 탈 때? 로 생각 됨)를 수행하기 전에 발생한다. 
이 메서드는 다른 리소스에서 호출되지 않는다해도 수행된다. 

장점
1. 생성자(일반)가 호출 되었을 때, 빈(bean)은 아직 초기화 되지 않았다. 
(예를 들어, 주입된 의존성이 없음)
하지만, @PostConstruct를 사용하면, 빈(bean)이 초기화 됨과 동시에
 의존성을 확인할 수 있다. 

2.2) bean lifecycle에서 오직 한 번만 수행된다는 것을 보장할 수 있다. 
(WAS가 올라가면서 bean이 생성될 때 딱 한 번 초기화함) 그래서 
@PostConstruct를 사용하면 bean이 여러번 초기화되는 것을 방지할 수 있다


@primary 
이것이 붙은 bean을 먼저 할당

@Configuration 
스프링 설정파일이다!!

프로퍼티 파일(=OO.properties)
@Value를 사용하면 프로퍼티 값을 가져올 수 있다.

classpath는 main인 경우 java와 resource에 잡힌다.


 @PreDestory
- 마지막 소멸 단계
- 스프링 컨테이너에서 객체(빈)를 제거하기 전에 해야할 작업이 있다면 
메소드위에 사용하는 어노테이션.
- close() 하기 직전에 실행 -> ((AbstractApplicationContext) context).close()
- close()를 명시해줘야 함


classpath scanning and managed components
관리를 할 컴포넌트를 스캐닝함


class에 @Component를 붙여줌으로서 이클래스는 bean으로 등록될것이다라는것을
자동스캐닝 해줌
-> xml설정 안해도됨

component 종류

1.@Repository 
DAO에 사용할 빈

2.@Service
비즈니스 로직을 담당할 빈

3.@controller -> mvc때 배움


appconfig bean 등록 -> appconfig에 conponentscan 등록
-> componentscan의 basepackages에 적용된 하위요소들 중
@Component가 붙여져 있는 것들을 스캔하여 bean으로 자동등록
모두 스캔

AnnotationConfigApplicationContext(basepackages 입력)를 이용하여
어노테이션을 적용한 설정파일 적용 가능

컴포넌트스캔시 필터사용
강사님은 정규표현식 or 어노테이션 or 어사인어블을 이용한 필터 많이 사용

@ComponentScan(basePackageClasses =Main.class, =>Main.class가 포함된 경로의 모든 파일
excludeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = B.class)


컴포넌트스캔을 효율적으로 하기 위해 인덱서 라이브러리 추가
-> 지정한 것만 스캔하기 때문에 스프링 로딩시 최적화

JSR 330 Standard Annotations
javax.inject 추가
보통 실무에서는 안씀
-> 내생각에도 그냥 스프링에서 제공하는거 쓰는게 낳을듯

스프링에서 사용하고 있는 기술을 자바표준으로 정의하여 인터페이스 제공
@Autowired를 @Inject로 대체
@Component는 @Named를 대체

어노테이션 bean 설정시
스프링은 구현클래스보다 인터페이스를 이용하여 설계함


constructor-arg로 선언하는 driverClass나 url이나 user이나 password같은 값들은
application.properties에
jdbc.url=?? / jdbc.username=?? / jdbc.password =?? 같이 선언하고
 <constructor-arg name="driverClass" value="${jdbc.driver-name}"/>
value값에저런식으로 불러오는 방식을 실무에서 많이 쓴다.


environment abstraction
시스템 환경변수 or 어플의 프로필 관리 등에 사용됨

bean definition profiles
https://engkimbs.tistory.com/712 : 프로필 간단 설명

개발할떄는 디폴트 프로필 사용(아무것도 안줌)
개발서버에 들어갈떄는 데브(?) 프로필을줌
외부사용자에 노출이되지 않을떄는 stage라는 프로필을 줌
운영단계에 production 라는 프로필줌

개발서버와 운영서버가 달라야하는데 스프링의 profile을 이용하면 손쉽게 관리 가능

Datasource라는 인터페이스는 여러개의 커넥션을 관리한다.
-> jdbc 커넥션과 비슷


@PropertySource 를 사용하여 특정 프로퍼티를 읽을 수 있음


@Resources

resources폴더안에 있는 파일들(외부파일)을 읽어와서 프로그래밍에 활용
스프링에서는 리소스라는 인터페이스를 통해 추상화함

주로사용하는 메서드는
exists()

getFile()

createRelatvie()

보통 리소스라는 인터페이스를 구현한 구현체를 사용함 
종류 6개
UrlResource
: 프로토콜 명시 후(url 방식을 통해) 해당 리소스 위치 명시
ClassPathResource : 가장많이사용
FileSystemResource : 거의 사용X
ServletContextResource : Web Project에서 사용
InputStreamResource : 거의 사용X
ByteArrayResource : 거의 사용X

이것보다 스프링부트에선 사용하는 특정관례 => 리소스 로더에서 사용하는 관례

리소스 인터페이스를 사용하는 이유
Resource resource = new ~ 
: Resource 라는 인터페이스의 타입만 사용하고 인스턴스는 교체하면서 사용할 수 
있기 때문에 일관적인 프로그래밍 가능


ResourceLoader을 더 주로 사용

Resource strings를 공부해두면 스프링부트할때 편함


※
data binding, type conversion : 스프링 초중급이상 / 보통 만들어진것을 그대로 사용

validation
폼 데이터가 넘어올때 혹은 DB에 저장하기 전 validation 사용(많이 사용)

스프링에선 Hibernate Validator을 주로 사용(jsr 349,자바표준)
but 스프링에서 제공하는 validator을 사용해도 됨(복잡한 로직시 좋음)

https://martinfowler.com/articles/replaceThrowWithNotification.html
: 인셉션을 throwing 하는것보다 validations을 notification하는거싱 좋다라는 설명

https://javacan.tistory.com/entry/Bean-Validation-2-Spring-5-valiidatiion : Bean Validation2.0(JSR-380)
예시1) @Email애노테이션을 사용하면 이메일 형식을 검사하기 위해 정규 표현식을 사용하지 않아도 됨
예시2) @Positive 애노테이션을 사용하면 값이 양수인지 검사할 수 있다.


https://blog.outsider.ne.kr/826 : javax.validation.validator 설명

Hibernate Validator안에 validation-api가 들어있음


AOP(IOC와 더불어 상당히 중요)
자바는 기존 OOP에서 AOP의 개념도 받아들임

@AspectJ 어노테이션 이용하여 사용 가능

Aroudn advice를 많이씀(나머지 4개를 하나로 합친것)
: before, returing, throwing, after

스프링에서 제공하는 aop는 메소드단위로만 제공한다.

aop proxy

a프록시가 a클래스를 감쌈

외부 -> a프록시 -> 중간 ->프록시를 통해서 코드가 실행

다이다믹 프록시(자바 SDK) = 인터페이스 이용
CGLIB 프록시 = 클래스 이용

http://wonwoo.ml/index.php/post/1576 : 스프링 aop proxy
https://skasha.tistory.com/45 : 스프링 aop proxy(좀더자세함)

aspect : 공통적으로 동작해야할 코드

http://closer27.github.io/backend/2017/08/03/spring-aop/ : aop 간단 설명

DataSource(인터페이스) 이용하여 커넥션,트랜잭션 등 대체
: hikaricp Datasource를 많이 사용(성능 월등, 가장많이사용)

https://goddaehee.tistory.com/167 : Transitional 설명
https://preamtree.tistory.com/97 : Transitional 설명2


https://gmlwjd9405.github.io/2018/12/19/jdbctemplate-usage.html : jdbc template 기본사용법